# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Geonet
                                 A QGIS plugin
 Geographical Network analysis toolkit.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2019 by HanwGeek
        email                : HanwGeek@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtCore import QThread, QTime, QModelIndex, pyqtSignal
from PyQt5.QtGui import QIcon, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QAction, QAbstractItemView, QProgressBar, QProgressDialog, QPushButton, QMessageBox
from qgis.core import QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsFeatureRequest, QgsWkbTypes
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .feat_input_dialog import FeatInputDialog
from .geonet_result_view import GeonetTableView
from collections import defaultdict
import os.path


class Geonet:
  """QGIS Plugin Implementation."""

  def __init__(self, iface):
      """Constructor.

      :param iface: An interface instance that will be passed to this class
          which provides the hook by which you can manipulate the QGIS
          application at run time.
      :type iface: QgsInterface
      """
      # Save reference to the QGIS interface
      self.iface = iface
      # initialize plugin directory
      self.plugin_dir = os.path.dirname(__file__)
      # initialize locale
      locale = QSettings().value('locale/userLocale')[0:2]
      locale_path = os.path.join(
          self.plugin_dir,
          'i18n',
          'Geonet_{}.qm'.format(locale))

      if os.path.exists(locale_path):
          self.translator = QTranslator()
          self.translator.load(locale_path)

          if qVersion() > '4.3.3':
              QCoreApplication.installTranslator(self.translator)

      # Declare instance attributes
      self.actions = []
      self.menu = self.tr(u'&Geonet')

      # Check if plugin was started the first time in current QGIS session
      # Must be set in initGui() to survive plugin reloads
      self.first_start = None

  # noinspection PyMethodMayBeStatic
  def tr(self, message):
      """Get the translation for a string using Qt translation API.

      We implement this ourselves since we do not inherit QObject.

      :param message: String for translation.
      :type message: str, QString

      :returns: Translated version of message.
      :rtype: QString
      """
      # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
      return QCoreApplication.translate('Geonet', message)

  def add_action(
      self,
      icon_path,
      text,
      callback,
      enabled_flag=True,
      add_to_menu=True,
      add_to_toolbar=True,
      status_tip=None,
      whats_this=None,
      parent=None):
      """Add a toolbar icon to the toolbar.

      :param icon_path: Path to the icon for this action. Can be a resource
          path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
      :type icon_path: str

      :param text: Text that should be shown in menu items for this action.
      :type text: str

      :param callback: Function to be called when the action is triggered.
      :type callback: function

      :param enabled_flag: A flag indicating if the action should be enabled
          by default. Defaults to True.
      :type enabled_flag: bool

      :param add_to_menu: Flag indicating whether the action should also
          be added to the menu. Defaults to True.
      :type add_to_menu: bool

      :param add_to_toolbar: Flag indicating whether the action should also
          be added to the toolbar. Defaults to True.
      :type add_to_toolbar: bool

      :param status_tip: Optional text to show in a popup when mouse pointer
          hovers over the action.
      :type status_tip: str

      :param parent: Parent widget for the new action. Defaults None.
      :type parent: QWidget

      :param whats_this: Optional text to show in the status bar when the
          mouse pointer hovers over the action.

      :returns: The action that was created. Note that the action is also
          added to self.actions list.
      :rtype: QAction
      """

      icon = QIcon(icon_path)
      action = QAction(icon, text, parent)
      action.triggered.connect(callback)
      action.setEnabled(enabled_flag)

      if status_tip is not None:
          action.setStatusTip(status_tip)

      if whats_this is not None:
          action.setWhatsThis(whats_this)

      if add_to_toolbar:
          # Adds plugin icon to Plugins toolbar
          self.iface.addToolBarIcon(action)

      if add_to_menu:
          self.iface.addPluginToMenu(
              self.menu,
              action)

      self.actions.append(action)

      return action

  def initGui(self):
      """Create the menu entries and toolbar icons inside the QGIS GUI."""

      self.add_action(
        'D:/Code/QGIS_Plugin/geonet/feature.png',
        text=self.tr(u''),
        callback=self.input_feature,
        parent=self.iface.mainWindow())
      
      self.add_action(
        'D:/Code/QGIS_Plugin/geonet/dangle.png',
        text=self.tr(u'Clean dangle nodes'),
        callback=self.dangle_clean,
        parent=self.iface.mainWindow())
      
      self.add_action(
        'D:/Code/QGIS_Plugin/geonet/pseudo.png',
        text=self.tr(u'Clean pseudo nodes'),
        callback=self.pseudo_clean,
        parent=self.iface.mainWindow())

      # init params
      self.resDlg = GeonetTableView()
      self.model = QStandardItemModel()
      self.resDlg.tView.verticalHeader().hide()
      self.resDlg.tView.setSelectionBehavior(QAbstractItemView.SelectRows)
      self.resDlg.tView.setSelectionMode(QAbstractItemView.SingleSelection)
      self.resDlg.tView.setEditTriggers(QAbstractItemView.NoEditTriggers)
      self.resDlg.tView.clicked.connect(self._zoom_to_feat)

      self.canvas = self.iface.mapCanvas()
      self.corrSet = set()
      self.errSet = set()
      self.errFeatMap = defaultdict(set)
      self.errPointList = []
      self.newFeatMap = {}
      self._id = 0
      self.featLayer = None
      # will be set False in run()
      self.first_start = True

  def unload(self):
      """Removes the plugin menu item and icon from QGIS GUI."""
      for action in self.actions:
          self.iface.removePluginMenu(
              self.tr(u'&Geonet'),
              action)
          self.iface.removeToolBarIcon(action)

  def input_feature(self):
      """Run method that performs all the real work"""

      # Create the dialog with elements (after translation) and keep reference
      # Only create GUI ONCE in callback, so that it will only load when the plugin is started
      if self.first_start == True:
        self.first_start = False
        self.dlg = FeatInputDialog()

      layers = list(QgsProject.instance().mapLayers().values())
      for layer in layers:
        if layer.type() == layer.VectorLayer:
          self.dlg.mLayerComboBox.addItem(layer.name())

      # show the dialog
      self.dlg.show()
      # Run the dialog event loop
      result = self.dlg.exec_()
      # See if OK was pressed
      if result:
          self.featLayer = layers[self.dlg.mLayerComboBox.currentIndex()]
          lineFeatIter = self.featLayer.getFeatures()
          # Find pseudo points
          list(map(self._map_point_to_feat, lineFeatIter))

  def dangle_clean(self):
    if self.featLayer is None:
      _warning = QMessageBox.warning(None, "Warning", "Please choose a feature first!")
      return

    self.model.setHorizontalHeaderLabels(["Point_X", "Point_Y", "Feature ID"])
    self.dangleList = []
    for (point, feat_ids) in self.errFeatMap.items():
      if len(feat_ids) == 1:
        # Pseudo node
        self.dangleList.extend(map(lambda x: (point, x), feat_ids))

    self._render_table(self.dangleList)
    self._render_err_layer("dangle", [x for (x, _) in self.dangleList])
    self.resDlg.show()

    result = self.resDlg.exec_()
    if result:
      pass

    self.model.clear()

  def pseudo_clean(self):
    if self.featLayer is None:
      _warning = QMessageBox.warning(None, "Warning", "Please choose a feature first!")
      return

    self.model.setHorizontalHeaderLabels(["Point_X", "Point_Y", "Feature ID"])
    self.pseduoList = []
    for (point, feat_ids) in self.errFeatMap.items():
      if len(feat_ids) == 2:
        # Pseudo node
        self.pseduoList.extend(map(lambda x: (point, x), feat_ids))

    self._render_table(self.pseduoList)
    self._render_err_layer("pseudo", [x for (x, _) in self.pseduoList])
    self.resDlg.show()

    result = self.resDlg.exec_()
    if result:
      # Union find feature set
      featCount = len(self.newFeatMap)
      _father = [i for i in range(0, featCount)]
      _rank = [0] * featCount
      def _find(x):
        if _father[x] != x:
          _father[x] = _find(_father[x])
        return _father[x]

      def _union(x, y):
        _x = _find(x)
        _y = _find(y)
        if _x == _y:
          return
        if _rank[_x] < _rank[_y]:
          _father[_x] = _y
        elif _rank[_x] > _rank[_y]:
          _father[_y] = _x
        else:
          _father[_y] = _x
          _rank[x] += 1

      for (_, feat_ids) in self.errFeatMap.items():
        feat_ids = list(feat_ids)
        for feat_id in feat_ids[1:]:
          _union(feat_id, feat_ids[0])
      feat_set = defaultdict(list)
      for idx, feat in enumerate(_father):
        feat_set[feat].append(idx)

    self._render_corr_layer("pseudo", feat_set.values())

    self.model.clear()

  def graph_build(self): 
    pass

  def _map_point_to_feat(self, feat):
    geom = feat.geometry()
    # Map features as point to id
    if geom.isMultipart():
      for line in geom.asGeometryCollection():
        new_feat = QgsFeature(self._id)
        new_feat.setGeometry(line)
        self._id += 1
        startPoint, endPoint = line.asPolyline()[0], line.asPolyline()[-1]
        self.newFeatMap[new_feat.id()] = new_feat
        self.errFeatMap[startPoint].add(new_feat.id())
        self.errFeatMap[endPoint].add(new_feat.id())
    else:
      new_feat = QgsFeature(self._id)
      new_feat.setGeometry(geom)
      self._id += 1
      startPoint, endPoint = geom.asPolyline()[0], geom.asPolyline()[-1]
      self.newFeatMap[new_feat.id()] = new_feat
      self.errFeatMap[startPoint].add(new_feat.id())
      self.errFeatMap[endPoint].add(new_feat.id())

  def _zoom_to_feat(self, item):
    # Clear previous selection
    for layer in self.canvas.layers():
      if layer.type() == layer.VectorLayer:
        layer.removeSelection()
    self.canvas.refresh()

    # Get id of feature selected
    feat_id = self.model.item(item.row(), 2).data(0)
    self.featLayer.select(int(feat_id))

    # Zoom canvas
    self.canvas.zoomToSelected(self.featLayer)
    self.canvas.refresh()

  def _render_table(self, list):
    for (idx, err) in enumerate(list):
      self.model.setItem(idx, 0, QStandardItem(str(err[0].x())))
      self.model.setItem(idx, 1, QStandardItem(str(err[0].y())))
      self.model.setItem(idx, 2, QStandardItem(str(err[1])))
      self.resDlg.tView.setModel(self.model)
      # self.resDlg.tView.selectionModel().currentRowChanged.connect(self.zoom_to_feature)
      w = self.resDlg.tView.width()
      self.resDlg.tView.setColumnWidth(0, w / 3 - 1)
      self.resDlg.tView.setColumnWidth(1, w / 3 - 1)
      self.resDlg.tView.setColumnWidth(2, w - 2 * w / 3 - 2)
    
  def _render_err_layer(self, name, _list):
    self.errLayer = QgsVectorLayer("Point?crs=" + self.featLayer.crs().authid(), self.featLayer.name() + "_" + name + "_Nodes", "memory")
    errPr = self.errLayer.dataProvider()
    self.errLayer.startEditing()

    feats = map(self._gen_point_feats, _list)
    errPr.addFeatures(feats)
    self.errLayer.commitChanges()
    self._add_layer(self.errLayer)

  def _render_corr_layer(self, name, _list):
    # Init correct layer
    self.corrLayer =  QgsVectorLayer("LineString?crs=" + self.featLayer.crs().authid(), 
                                      self.featLayer.name() + "_" + name + "_Correct", "memory")
    corrPr = self.corrLayer.dataProvider()
    self.corrLayer.startEditing()

    # Generate new features
    feats = map(self._gen_corr_feats, _list)
    corrPr.addFeatures(feats)
    self.corrLayer.commitChanges()
    self._add_layer(self.corrLayer)

  def _add_layer(self, layer):
    QgsProject.instance().addMapLayer(layer)
  
  def _gen_point_feats(self, p):
    feat = QgsFeature()
    feat.setGeometry(QgsGeometry.fromPointXY(p))
    return feat

  def _gen_corr_feats(self, feat_ids):
    new_feat = QgsFeature()
    geom = new_feat.geometry()

    # Combine features
    for idx, feat_id in enumerate(feat_ids):
      feat = self.newFeatMap[feat_id]
      if idx == 0:
        new_feat.setGeometry(feat.geometry())
        geom = new_feat.geometry()
      else:
        geom = geom.combine(feat.geometry())
    new_feat.setGeometry(geom)
    return new_feat

class WorkThread(QThread):
  trigger = pyqtSignal()
  addLayerTrigger = pyqtSignal()
  def __init__(self, cleaner, parent=None):
    super(WorkThread, self).__init__(parent)
    self.cleaner = cleaner
    self.trigger.connect(self.cleaner.pBar.close)
    self.addLayerTrigger.connect(self.cleaner._add_layer)

  def __del__(self):
    self.wait()

  def run(self):
    # self.cleaner._pseudo_clean()
    self.trigger.emit()
    self.addLayerTrigger.emit()
       
class WaitProgressDialog(QProgressDialog):
  def __init__(self, parent=None):
    super(WaitProgressDialog, self).__init__(parent)
    self.setMaximum(0)
    self.setMinimum(0)
    self.setWindowTitle("Wating... ")
    self.setFixedSize(400, 100)
